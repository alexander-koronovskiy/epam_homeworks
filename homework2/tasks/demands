1

Файл, содержащий текст. Завершить с использованием только коллекций по умолчанию:
     1) Найдите 10 самых длинных слов, состоящих из наибольшего количества уникальных символов
     2) Найдите самый редкий символ для документа
     3) Считайте каждый знак препинания
     4) Подсчитайте все символы, отличные от ascii
     5) Найдите наиболее распространенные символы не ascii для документа

2

Для массива размера n найдите наиболее общие и наименее распространенные элементы.
Самый распространенный элемент - это элемент, который встречается более n // 2 раз.
Наименее распространенный элемент - это элемент, которого меньше других.
Вы можете предположить, что массив непустой и самый распространенный элемент
всегда существуют в массиве.
Пример 1:
Ввод: [3,2,3]
Выход: 3, 2
Пример 2:
Ввод: [2,2,1,1,1,2,2]
Выход: 2, 1


3

Напишите функцию, которая принимает K списков в качестве аргументов и возвращает все возможные
списки из K элементов, в которых первый элемент - из первого списка,
второй от второго и так один.
Вы можете предположить, что каждый список содержит хотя бы один элемент
Пример:
утверждать комбинации ([1, 2], [3, 4]) == [
     [1, 3],
     [1, 4],
     [2, 3],
     [2, 4],
]

4

Напишите функцию, которая принимает другую функцию в качестве аргумента. Затем это
должен возвращать такую функцию, поэтому каждый вызов начальной
следует кэшировать.
def func (a, b):
     возврат (a ** b) ** 2
cache_func = кеш (функция)
некоторые = 100, 200
val_1 = cache_func (* некоторые)
val_2 = cache_func (* некоторые)
assert val_1 равно val_2

5

Некоторые функции ведут себя немного громоздко, когда мы имеем дело с
позиционные и ключевые аргументы.
Напишите функцию, которая принимает любую итерацию уникальных значений, а затем
он ведет себя как функция диапазона:
import string
assert = custom_range(string.ascii_lowercase, 'g') == ['a', 'b', 'c', 'd', 'e', 'f']
assert = custom_range(string.ascii_lowercase, 'g', 'p') == ['g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o']
assert = custom_range(string.ascii_lowercase, 'p', 'g', -2) == ['p', 'n', 'l', 'j', 'h']
